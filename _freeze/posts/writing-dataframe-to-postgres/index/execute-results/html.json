{
  "hash": "b8da0e8c7c4b51702037e3ec40d8948f",
  "result": {
    "markdown": "---\ntitle: \"Writing a dataframe to a Postgres database via RStudio\"\nauthor: \"Bianca Peterson\"\ndate: \"2023-06-05\"\ncategories: [database, SQL]\nimage: thumbnail.jpg\n---\n\n\nThe following post will demonstrate how you can connect to a PostgreSQL (also called Postgres) database via RStudio and write the dataframe to a Postgres table.\n\n### Launch a Postgres database\n\nYou can download PostgreSQL as a ready-to-use package for your operating system from [this page](https://www.postgresql.org/download/).\n\nAlternatively, you can use the postgres docker image to create your own PostgreSQL database:\n\n1.  Download and install [Docker](https://docs.docker.com/engine/install/).\n\n2.  Pull the Postgres Docker Official Image from Dockerhub by running the following command in your terminal:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    docker pull postgres\n    ```\n    :::\n\n\n3.  Start a Postgres instance by running the following command in your terminal:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    docker run --name mytestdb -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres\n    ```\n    :::\n\n\n`--rm` will remove the container when it is stopped.\n\n`-d` will run the container in 'detatched' mode, allowing you to use the same terminal window for other tasks.\n\n`-e` passes an environment variable, like the database password.\n\n`--name` gives the container a name when you run it.\n\n`-p` maps port 5432 on the container to the host port 5432.\n\nIf there is already another process occupying port `5432` on your computer, you change the port to `5433:5432`, for example.\n\n### Define database credentials\n\nIn RStudio, choose `New Blank File` and create a `.Renviron` file within your current working directory. Inside this `.Renviron` file, specify the database credentials from the previous section:\n\n``` bash\nDB_HOST=\"localhost\"\nDB_PORT=\"5432\"\nDB_USER=\"postgres\"\nDB_PASSWORD=\"mysecretpassword\"\nDB_DATABASE=\"mytestdb\"\n```\n\n### Connect to the Postgres database\n\nInside an R script, load your libraries and connect to the database:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load libraries.\nlibrary(DBI)\nlibrary(RPostgreSQL)\n\n# Establish a connection to your PostgreSQL database.\ncon <- dbConnect(\n  drv = dbDriver(\"PostgreSQL\"),\n  dbname = Sys.getenv(\"DB_DATABASE\"),\n  host = Sys.getenv(\"DB_HOST\"),\n  port = Sys.getenv(\"DB_PORT\"),\n  user = Sys.getenv(\"DB_USER\"),\n  password = Sys.getenv(\"DB_PASSWORD\")\n)\n```\n:::\n\n\n### Prepare data for the Postgres database\n\nYou will need to make variable names database safe, which means that names must:\n\n-   contain only letters (a-z, A-Z), numbers (0-9), or underscores (\\_);\n\n-   begin with a letter or underscore (not a number);\n\n-   be lower case and unique; and\n\n-   be less then 59 characters.\n\nTo clean up the variable names, you can make use of the following function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Custom function to format variable names.\nformat_names <- function(names) {\n  names <- gsub(pattern = '[^a-z0-9]+',\n                replacement = '_', tolower(names))\n  names <- make.names(names, unique=TRUE, allow_=TRUE)\n  names <- gsub('.','_', names, fixed=TRUE)\n  names\n}\n\n# Use custom function to format variable names.\ncolnames(cars) <- format_names(colnames(cars))\n```\n:::\n\n\n### Write the dataframe to a table in the Postgres database\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(conn = con,\n             name = \"cars\",\n             value = cars,\n             overwrite = TRUE)\n```\n:::\n\n\n`name` specifies the name of the table (e.g. `cars`);\n\n`value` specifies which dataframe to write to a table.\n\nIf you don't want to overwrite an existing table, use the option `append = TRUE`.\n\n### Query the Postgres database\n\nYou can return an entire table from the Postgres database by running the following in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- dbReadTable(con, \"cars\")\n```\n:::\n\n\nOr you could use an SQL query to extract subsets of data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_subset <- dbGetQuery(con, \"select column1, column2 from cars\")\n```\n:::\n\n\n### Close the database connection\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}