[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi there! I’m Bianca Peterson, a Data Scientist at Fathom Data. I have a passion for managing projects, teaching computational skills and analysing data.\nIf you have a project that you want to get started or would like to get training in data analysis, visualisation and report writing, get in touch.\nYou can read more about my work here."
  },
  {
    "objectID": "posts/writing-dataframe-to-postgres/index.html",
    "href": "posts/writing-dataframe-to-postgres/index.html",
    "title": "Writing a dataframe to a Postgres database via RStudio",
    "section": "",
    "text": "The following post will demonstrate how you can connect to a PostgreSQL (also called Postgres) database via RStudio and write the dataframe to a Postgres table.\n\nLaunch a Postgres database\nYou can download PostgreSQL as a ready-to-use package for your operating system from this page.\nAlternatively, you can use the postgres docker image to create your own PostgreSQL database:\n\nDownload and install Docker.\nPull the Postgres Docker Official Image from Dockerhub by running the following command in your terminal:\n\ndocker pull postgres\n\nStart a Postgres instance by running the following command in your terminal:\n\ndocker run --name mytestdb -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres\n\n\n--rm will remove the container when it is stopped.\n-d will run the container in ‘detatched’ mode, allowing you to use the same terminal window for other tasks.\n-e passes an environment variable, like the database password.\n--name gives the container a name when you run it.\n-p maps port 5432 on the container to the host port 5432.\nIf there is already another process occupying port 5432 on your computer, you change the port to 5433:5432, for example.\n\n\nDefine database credentials\nIn RStudio, choose New Blank File and create a .Renviron file within your current working directory. Inside this .Renviron file, specify the database credentials from the previous section:\nDB_HOST=\"localhost\"\nDB_PORT=\"5432\"\nDB_USER=\"postgres\"\nDB_PASSWORD=\"mysecretpassword\"\nDB_DATABASE=\"mytestdb\"\n\n\nConnect to the Postgres database\nInside an R script, load your libraries and connect to the database:\n\n# Load libraries.\nlibrary(DBI)\nlibrary(RPostgreSQL)\n\n# Establish a connection to your PostgreSQL database.\ncon &lt;- dbConnect(\n  drv = dbDriver(\"PostgreSQL\"),\n  dbname = Sys.getenv(\"DB_DATABASE\"),\n  host = Sys.getenv(\"DB_HOST\"),\n  port = Sys.getenv(\"DB_PORT\"),\n  user = Sys.getenv(\"DB_USER\"),\n  password = Sys.getenv(\"DB_PASSWORD\")\n)\n\n\n\nPrepare data for the Postgres database\nYou will need to make variable names database safe, which means that names must:\n\ncontain only letters (a-z, A-Z), numbers (0-9), or underscores (_);\nbegin with a letter or underscore (not a number);\nbe lower case and unique; and\nbe less then 59 characters.\n\nTo clean up the variable names, you can make use of the following function:\n\n# Custom function to format variable names.\nformat_names &lt;- function(names) {\n  names &lt;- gsub(pattern = '[^a-z0-9]+',\n                replacement = '_', tolower(names))\n  names &lt;- make.names(names, unique=TRUE, allow_=TRUE)\n  names &lt;- gsub('.','_', names, fixed=TRUE)\n  names\n}\n\n# Use custom function to format variable names.\ncolnames(cars) &lt;- format_names(colnames(cars))\n\n\n\nWrite the dataframe to a table in the Postgres database\n\ndbWriteTable(conn = con,\n             name = \"cars\",\n             value = cars,\n             overwrite = TRUE)\n\nname specifies the name of the table (e.g. cars);\nvalue specifies which dataframe to write to a table.\nIf you don’t want to overwrite an existing table, use the option append = TRUE.\n\n\nQuery the Postgres database\nYou can return an entire table from the Postgres database by running the following in R:\n\nmy_data &lt;- dbReadTable(con, \"cars\")\n\nOr you could use an SQL query to extract subsets of data:\n\nmy_subset &lt;- dbGetQuery(con, \"select column1, column2 from cars\")\n\n\n\nClose the database connection\n\ndbDisconnect(con)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blogs",
    "section": "",
    "text": "Writing a dataframe to a Postgres database via RStudio\n\n\n\n\n\n\n\ndatabase\n\n\nSQL\n\n\n\n\n\n\n\n\n\n\n\nJun 5, 2023\n\n\nBianca Peterson\n\n\n\n\n\n\nNo matching items"
  }
]